var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.928,1,1.928]],["body/modules/AppModule.html",[0,2.858,1,3.581,2,1.957,3,2.55,4,2.885,5,2.885,6,3.195,7,0.037,8,3.243,9,2.489,10,2.489,11,0.408,12,0.352,13,0.352,14,3.487,15,3.759,16,0.65,17,1.445,18,2.885,19,1.957,20,2.885,21,2.193,22,3.487,23,1.712,24,3.487,25,3.487,26,3.487,27,3.487,28,3.487,29,2.885,30,3.487,31,3.487,32,3.487,33,3.487,34,3.487,35,0.737,36,3.487,37,3.487,38,3.487,39,3.487,40,3.487,41,3.607,42,3.487,43,3.487,44,0.408,45,0.467,46,0.027,47,0.027]],["title/controllers/AuthController.html",[48,1.928,49,1.928]],["body/controllers/AuthController.html",[7,0.037,11,0.323,12,0.279,13,0.279,16,0.639,17,1.144,44,0.323,45,0.37,46,0.023,47,0.023,48,2.44,49,2.44,50,2.285,51,2.285,52,0.279,53,1.771,54,3.608,55,1.668,56,1.668,57,1.382,58,3.879,59,2.73,60,2.264,61,5.312,62,1.4,63,2.761,64,2.047,65,2.047,66,0.525,67,2.047,68,4.484,69,2.047,70,1.509,71,3.879,72,2.73,73,2.761,74,3.879,75,2.73,76,2.761,77,1.737,78,1.04,79,0.947,80,0.862,81,0.785,82,0.785,83,0.785,84,1.55,85,2.285,86,2.285,87,2.285,88,0.82,89,2.285,90,0.785,91,2.761,92,1.737,93,2.761,94,1.049,95,2.761,96,2.761,97,2.761]],["title/modules/AuthModule.html",[0,1.928,6,1.72]],["body/modules/AuthModule.html",[0,2.616,2,1.714,3,2.334,6,3.285,7,0.037,8,2.969,9,2.18,10,2.18,11,0.358,12,0.309,13,0.309,15,3.441,16,0.678,17,1.265,18,2.527,19,1.714,20,3.913,21,1.921,23,1.151,44,0.358,45,0.409,46,0.024,47,0.024,49,2.975,50,3.441,77,1.921,88,1.159,89,2.527,94,0.715,98,2.527,99,2.527,100,2.502,101,3.076,102,3.054,103,4.159,104,4.201,105,3.054,106,2.18,107,3.054,108,1.921,109,2.527,110,3.054,111,3.054,112,3.054,113,2.18,114,3.054,115,3.054,116,3.054,117,3.054,118,3.054]],["title/injectables/AuthService.html",[88,0.648,119,1.399]],["body/injectables/AuthService.html",[7,0.037,11,0.209,12,0.18,13,0.18,16,0.573,17,0.738,19,1,23,2.105,35,0.828,44,0.209,45,0.239,46,0.016,47,0.016,52,0.18,53,1.277,54,1.76,55,1.185,56,1.185,57,0.981,59,2.197,62,1.222,64,1.787,65,1.787,66,0.458,67,1.787,69,1.577,70,1.283,72,2.197,75,2.197,77,1.12,81,0.506,82,0.506,83,0.506,84,1,85,1.474,86,1.474,87,1.474,88,0.592,90,0.795,92,1.76,94,1.228,100,2.156,108,1.12,113,3.591,119,1.277,120,1.12,121,1.474,122,3.591,123,1.781,124,1.781,125,2.797,126,1.781,127,1.781,128,1.781,129,1.781,130,1.781,131,1.781,132,1.474,133,1.781,134,1.474,135,1.474,136,1.474,137,1.474,138,1.105,139,2.859,140,4.254,141,2.797,142,1.8,143,2.797,144,1.71,145,1.781,146,1.781,147,1.781,148,1.781,149,1.781,150,4.162,151,2.466,152,3.454,153,3.454,154,1.328,155,2.797,156,2.797,157,1.342,158,2.315,159,1.474,160,1.781,161,1.781,162,1.781,163,0.304,164,1.781,165,2.797,166,2.315,167,1.781,168,1.781,169,1.474,170,1.475,171,1.781,172,1.781]],["title/interfaces/AuthServiceClient.html",[173,0.359,174,1.051]],["body/interfaces/AuthServiceClient.html",[7,0.037,11,0.27,12,0.233,13,0.233,16,0.399,35,0.721,44,0.662,46,0.02,47,0.02,52,0.233,53,1.556,55,1.39,56,1.39,57,1.151,62,1.265,64,1.85,65,1.85,66,0.474,67,1.85,69,1.85,70,1.151,78,0.869,79,0.791,80,0.72,81,0.968,82,0.968,83,0.968,88,0.488,90,0.655,94,0.54,138,0.797,142,1.39,144,1.265,154,1.692,157,0.968,163,0.964,170,0.869,173,0.621,174,1.169,175,0.791,176,0.72,177,1.679,178,1.491,179,2.306,180,2.892,181,2.283,182,1.679,183,1.491,184,2.306,185,1.679,186,1.491,187,2.306,188,0.956,189,0.869,190,0.791,191,1.284,192,1.679,193,0.791,194,0.791,195,1.526,196,0.791,197,1.412,198,2.07,199,1.854,200,1.412,201,0.956,202,1.412,203,1.412,204,0.956]],["title/interfaces/AuthServiceController.html",[173,0.359,194,1.051]],["body/interfaces/AuthServiceController.html",[7,0.037,11,0.263,12,0.227,13,0.227,16,0.391,35,0.706,44,0.659,46,0.02,47,0.02,52,0.227,53,1.525,55,1.368,56,1.368,57,1.133,62,1.245,64,1.821,65,1.821,66,0.467,67,1.821,69,1.821,70,1.406,78,0.846,79,0.77,80,0.701,81,1.133,82,1.133,83,1.133,88,0.475,90,0.638,94,0.525,138,0.781,142,1.368,144,1.245,154,1.68,157,0.949,163,0.959,170,0.846,173,0.616,174,0.77,175,0.77,176,0.701,177,1.652,178,1.474,180,2.846,181,2.268,182,1.652,183,1.474,185,1.652,186,1.474,188,0.93,189,0.846,190,0.77,191,1.258,192,1.652,193,0.77,194,1.145,195,1.502,196,0.77,197,1.384,198,2.05,199,1.83,200,1.384,201,0.93,202,1.384,203,1.384,204,0.93,205,2.245,206,2.245,207,2.245]],["title/classes/HttpExceptionFilter.html",[45,0.411,208,2.188]],["body/classes/HttpExceptionFilter.html",[7,0.037,11,0.367,12,0.316,13,0.316,16,0.561,17,1.297,29,3.963,44,0.367,45,0.419,46,0.025,47,0.025,52,0.316,53,1.931,62,0.977,64,1.429,65,1.429,66,0.367,67,1.429,69,1.429,94,0.732,132,3.963,142,1.837,144,1.32,151,3.419,154,1.673,180,3.019,208,3.019,209,1.58,210,3.499,211,2.59,212,2.66,213,4.789,214,4.228,215,5.129,216,5.129,217,3.13,218,3.13,219,4.228,220,3.13,221,4.228,222,2.59,223,3.13,224,3.13,225,3.13,226,4.228,227,3.13,228,3.13,229,3.13,230,3.13,231,3.13,232,3.13,233,3.13,234,3.13,235,3.13,236,3.13,237,2.59,238,3.13,239,3.13,240,3.13]],["title/injectables/JwtService.html",[100,1.399,119,1.399]],["body/injectables/JwtService.html",[7,0.037,11,0.225,12,0.194,13,0.194,16,0.546,17,0.797,19,1.08,21,1.21,23,1.891,35,0.863,44,0.225,45,0.258,46,0.017,47,0.017,52,0.194,53,1.356,54,2.774,57,0.844,62,1.567,64,2.219,65,2.219,66,0.588,67,2.219,69,2.128,70,1.324,90,0.844,92,2.774,94,1.091,100,1.657,104,4.021,106,1.373,108,1.21,113,3.677,119,1.356,120,1.21,122,4.107,134,1.592,135,1.592,136,1.592,138,0.45,139,1.592,144,0.601,150,1.592,151,1.373,154,0.601,157,1.324,158,2.458,159,2.458,163,0.993,166,1.592,169,1.592,241,1.592,242,0.628,243,4.079,244,3.628,245,2.97,246,2.97,247,2.97,248,2.97,249,1.923,250,2.97,251,2.458,252,2.97,253,1.923,254,2.97,255,1.923,256,2.97,257,1.923,258,2.97,259,4.08,260,1.923,261,2.97,262,1.923,263,2.97,264,1.923,265,1.923,266,1.592,267,1.923,268,1.923,269,1.923,270,2.121,271,1.923,272,1.923,273,1.923,274,1.923,275,1.923,276,2.97,277,1.923,278,1.923,279,2.97,280,1.923,281,1.923,282,1.923,283,1.923,284,1.923,285,1.923]],["title/injectables/JwtStrategy.html",[101,1.72,119,1.399]],["body/injectables/JwtStrategy.html",[7,0.037,11,0.365,12,0.315,13,0.315,16,0.627,17,1.293,23,1.176,44,0.365,45,0.418,46,0.025,47,0.025,52,0.315,53,1.927,54,3.008,57,1.199,60,1.575,62,1.493,64,1.927,65,1.927,66,0.56,67,1.927,69,1.425,70,1.199,77,1.963,90,1.199,92,3.008,94,0.73,100,2.654,101,2.369,108,1.963,109,2.582,119,1.927,120,1.963,122,3.413,137,3.492,157,0.886,163,0.815,242,0.892,243,2.227,286,2.582,287,3.12,288,3.12,289,4.22,290,3.12,291,3.12,292,3.12,293,2.582,294,3.12,295,3.12,296,2.582,297,2.227,298,3.12,299,3.12,300,3.12,301,3.12,302,3.12,303,3.12,304,3.12,305,2.227,306,3.12]],["title/interfaces/LoginRequest.html",[173,0.359,178,0.957]],["body/interfaces/LoginRequest.html",[7,0.037,11,0.293,12,0.253,13,0.253,16,0.423,35,1.043,44,0.673,46,0.021,47,0.021,52,0.253,55,0.858,56,0.858,57,0.711,66,0.423,70,1.206,78,0.942,79,0.858,80,0.781,81,1.027,82,1.027,83,1.027,88,0.529,90,0.711,94,0.585,138,1.154,142,1.456,144,1.325,154,1.727,157,1.027,163,1.01,170,0.942,173,0.636,174,0.858,175,0.858,176,0.781,177,1.498,178,1.452,181,2.196,182,1.498,183,1.325,185,1.498,186,1.325,188,1.036,189,0.942,190,0.858,191,1.362,192,1.759,193,0.858,194,0.858,195,1.599,196,0.858,197,1.498,198,2.13,199,1.927,200,1.498,201,1.036,202,1.498,203,1.498,204,1.036,242,0.764]],["title/classes/LoginRequestDto.html",[45,0.411,59,1.72]],["body/classes/LoginRequestDto.html",[7,0.036,11,0.417,12,0.36,13,0.36,16,0.539,35,1.08,44,0.417,45,0.617,46,0.027,47,0.027,52,0.36,59,2.585,60,2.325,62,1.438,66,0.539,84,1.999,138,1.308,163,0.92,178,1.594,209,1.798,212,2.897,242,0.974,307,2.947,308,4.224,309,4.466,310,3.811,311,3.561,312,2.947,313,3.811,314,3.811,315,3.811,316,3.561,317,3.288,318,2.947,319,2.24,320,2.947]],["title/interfaces/LoginResponse.html",[82,0.871,173,0.359]],["body/interfaces/LoginResponse.html",[7,0.037,11,0.288,12,0.248,13,0.248,16,0.418,35,0.755,44,0.671,46,0.021,47,0.021,52,0.248,55,0.843,56,0.843,57,0.698,66,0.492,70,1.194,78,0.926,79,0.843,80,0.768,81,1.014,82,1.194,83,1.014,88,0.52,90,0.698,94,0.575,138,0.835,142,1.753,144,1.596,154,1.719,157,1.392,163,1.007,170,0.926,173,0.633,174,0.843,175,0.843,176,0.768,177,1.479,178,1.313,181,2.185,182,1.479,183,1.313,185,1.479,186,1.313,188,1.019,189,0.926,190,0.843,191,1.345,192,2.03,193,0.843,194,0.843,195,1.584,196,0.843,197,1.479,198,2.117,199,1.911,200,1.479,201,1.019,202,1.479,203,1.479,204,1.019,242,0.755]],["title/interfaces/RegisterRequest.html",[173,0.359,183,0.957]],["body/interfaces/RegisterRequest.html",[7,0.037,11,0.293,12,0.253,13,0.253,16,0.423,35,1.043,44,0.673,46,0.021,47,0.021,52,0.253,55,0.858,56,0.858,57,0.711,66,0.423,70,1.206,78,0.942,79,0.858,80,0.781,81,1.027,82,1.027,83,1.027,88,0.529,90,0.711,94,0.585,138,1.154,142,1.456,144,1.325,154,1.727,157,1.027,163,1.01,170,0.942,173,0.636,174,0.858,175,0.858,176,0.781,177,1.498,178,1.325,181,2.196,182,1.498,183,1.452,185,1.498,186,1.325,188,1.036,189,0.942,190,0.858,191,1.362,192,1.759,193,0.858,194,0.858,195,1.599,196,0.858,197,1.498,198,2.13,199,1.927,200,1.498,201,1.036,202,1.498,203,1.498,204,1.036,242,0.764]],["title/classes/RegisterRequestDto.html",[45,0.411,72,1.72]],["body/classes/RegisterRequestDto.html",[7,0.036,11,0.417,12,0.36,13,0.36,16,0.539,35,1.08,44,0.417,45,0.617,46,0.027,47,0.027,52,0.36,60,2.325,62,1.438,66,0.539,72,2.585,84,1.999,138,1.308,163,0.92,183,1.594,209,1.798,212,2.897,242,0.974,308,4.224,309,4.466,310,3.811,312,2.947,313,3.811,314,3.811,315,3.811,317,3.288,318,2.947,319,2.24,320,2.947,321,2.947,322,3.561,323,3.561]],["title/interfaces/RegisterResponse.html",[81,0.871,173,0.359]],["body/interfaces/RegisterResponse.html",[7,0.037,11,0.293,12,0.253,13,0.253,16,0.423,35,0.764,44,0.673,46,0.021,47,0.021,52,0.253,55,0.858,56,0.858,57,0.711,66,0.423,70,1.206,78,0.942,79,0.858,80,0.781,81,1.206,82,1.027,83,1.027,88,0.529,90,0.711,94,0.585,138,0.846,142,1.763,144,1.605,154,1.727,157,1.027,163,0.997,170,0.942,173,0.636,174,0.858,175,0.858,176,0.781,177,1.498,178,1.325,181,2.196,182,1.498,183,1.325,185,1.498,186,1.325,188,1.036,189,0.942,190,0.858,191,1.362,192,2.044,193,0.858,194,0.858,195,1.599,196,0.858,197,1.498,198,2.13,199,1.927,200,1.498,201,1.036,202,1.498,203,1.498,204,1.036,242,0.764]],["title/classes/User.html",[23,1.155,45,0.411]],["body/classes/User.html",[7,0.036,11,0.372,12,0.321,13,0.321,16,0.372,23,1.61,35,1.092,41,3.685,44,0.372,45,0.426,46,0.025,47,0.025,52,0.321,60,2.437,62,1.507,66,0.649,138,1.208,163,0.982,173,0.372,209,1.605,242,0.904,270,3.446,297,3.051,305,3.685,324,2.27,325,3.994,326,4.827,327,5.161,328,3.536,329,4.271,330,3.179,331,3.536,332,3.536,333,3.179,334,3.179,335,4.271,336,2.631,337,3.051,338,2.27,339,2.27,340,2,341,2.631,342,2.631,343,2.631,344,2.631,345,3.536]],["title/interfaces/UserCreationAttrs.html",[173,0.359,340,1.928]],["body/interfaces/UserCreationAttrs.html",[7,0.036,11,0.413,12,0.356,13,0.356,16,0.413,23,1.328,35,1.178,41,3.265,44,0.413,45,0.472,46,0.027,47,0.027,52,0.356,66,0.652,138,1.303,163,1.015,173,0.413,175,1.209,242,0.967,270,2.515,297,2.515,305,3.265,324,2.515,325,3.785,328,2.916,329,3.785,331,2.916,332,2.916,335,4.448,336,2.916,337,3.265,338,2.515,339,2.515,340,2.877,341,2.916,342,2.916,343,2.916,344,2.916,345,3.785]],["title/interfaces/ValidateRequest.html",[173,0.359,186,0.957]],["body/interfaces/ValidateRequest.html",[7,0.037,11,0.298,12,0.257,13,0.257,16,0.429,35,0.774,44,0.675,46,0.021,47,0.021,52,0.257,55,0.873,56,0.873,57,0.723,66,0.298,70,1.218,78,0.959,79,0.873,80,0.795,81,1.04,82,1.04,83,1.04,88,0.538,90,0.723,94,0.596,138,0.857,142,1.47,144,1.339,154,1.734,157,1.411,163,1,170,0.959,173,0.639,174,0.873,175,0.873,176,0.795,177,1.517,178,1.339,181,2.208,182,1.517,183,1.339,185,1.517,186,1.464,188,1.055,189,0.959,190,0.873,191,1.379,192,1.776,193,0.873,194,0.873,195,1.615,196,0.873,197,1.517,198,2.143,199,1.942,200,1.517,201,1.055,202,1.517,203,1.517,204,1.055,242,0.774]],["title/classes/ValidateRequestDto.html",[45,0.411,75,1.72]],["body/classes/ValidateRequestDto.html",[7,0.036,11,0.474,12,0.409,13,0.409,16,0.585,44,0.474,45,0.669,46,0.029,47,0.029,52,0.409,60,2.043,62,1.264,66,0.474,75,2.803,84,2.271,157,1.538,163,0.851,186,1.691,209,2.043,212,3.141,242,1.056,317,3.866,319,2.546,346,3.349,347,4.047]],["title/interfaces/ValidateResponse.html",[83,0.871,173,0.359]],["body/interfaces/ValidateResponse.html",[7,0.037,11,0.288,12,0.248,13,0.248,16,0.418,35,0.755,44,0.671,46,0.021,47,0.021,52,0.248,55,0.843,56,0.843,57,0.698,66,0.492,70,1.194,78,0.926,79,0.843,80,0.768,81,1.014,82,1.014,83,1.194,88,0.52,90,0.698,94,0.575,138,0.835,142,1.753,144,1.596,154,1.719,157,1.014,163,1.007,170,1.738,173,0.633,174,0.843,175,0.843,176,0.768,177,1.479,178,1.313,181,2.185,182,1.479,183,1.313,185,1.479,186,1.313,188,1.019,189,0.926,190,0.843,191,1.345,192,2.03,193,0.843,194,0.843,195,1.584,196,0.843,197,1.479,198,2.117,199,1.911,200,1.479,201,1.019,202,1.479,203,1.479,204,1.019,242,0.755]],["title/coverage.html",[348,2.976]],["body/coverage.html",[7,0.036,13,0.287,23,1.07,45,0.693,46,0.023,47,0.023,48,1.786,49,1.786,51,2.349,59,1.593,66,0.332,72,1.593,75,1.593,80,0.887,81,0.807,82,0.807,83,0.807,88,0.6,100,1.296,101,1.593,119,2.078,121,2.349,173,0.667,174,0.974,176,1.837,178,0.887,183,0.887,186,0.887,190,0.974,193,0.974,194,0.974,195,1.49,196,0.974,208,2.027,210,2.349,211,2.349,237,2.349,241,2.349,286,2.349,307,2.349,321,2.349,324,2.823,337,2.027,340,1.786,346,2.349,348,2.027,349,2.839,350,2.839,351,2.839,352,6.169,353,5.499,354,5.359,355,4.551,356,5.175,357,4.551,358,2.839,359,2.839,360,2.349,361,2.349,362,2.839]],["title/dependencies.html",[3,2.067,363,2.123]],["body/dependencies.html",[3,2.064,7,0.037,17,1.524,19,2.064,21,2.313,45,0.63,46,0.028,47,0.028,79,1.261,106,2.626,189,1.386,222,3.043,243,2.626,266,3.043,293,3.043,296,3.891,319,2.313,338,2.626,364,3.678,365,3.678,366,3.678,367,5.462,368,3.678,369,3.678,370,5.183,371,3.678,372,3.678,373,3.678,374,3.678,375,3.678,376,3.678,377,3.678,378,3.678,379,3.678,380,3.678,381,3.678,382,3.678,383,3.678,384,3.678,385,3.678,386,3.678,387,3.678,388,3.678]],["title/miscellaneous/functions.html",[389,1.614,390,3.047]],["body/miscellaneous/functions.html",[7,0.032,46,0.032,47,0.032,52,0.463,176,1.43,196,1.959,360,3.79,361,4.726,389,2.881,390,3.79,391,3.79,392,4.58]],["title/index.html",[52,0.259,393,2.566,394,2.566]],["body/index.html",[7,0.036,12,0.341,46,0.026,47,0.026,251,2.789,339,2.406,348,2.406,395,3.37,396,3.37,397,4.443,398,3.37,399,3.37,400,3.37,401,3.37,402,3.37,403,3.37,404,2.789,405,4.97,406,3.37,407,3.37,408,5.749,409,3.37,410,3.37,411,3.37,412,5.639,413,3.37,414,3.37,415,4.443,416,3.37,417,3.37,418,3.37,419,3.37,420,4.443,421,4.443,422,3.37,423,3.37,424,3.37,425,4.443,426,4.443,427,3.37,428,3.37,429,3.37,430,3.37,431,3.37,432,2.789,433,3.37,434,3.37,435,3.37,436,3.37,437,3.37,438,3.37,439,3.37,440,3.37,441,3.37,442,3.37,443,2.789,444,3.37,445,3.37,446,3.37,447,3.37,448,3.37,449,3.37,450,2.789]],["title/modules.html",[2,2.34]],["body/modules.html",[1,2.907,2,2.594,6,2.594,7,0.032,46,0.032,47,0.032,432,4.475,451,5.408,452,5.408,453,5.408]],["title/overview.html",[454,3.45]],["body/overview.html",[1,3.532,2,2.227,3,2.768,4,3.283,5,3.283,6,3.414,7,0.035,8,3.521,9,2.832,10,2.832,46,0.029,47,0.029,48,2.496,88,1.135,98,3.283,99,3.283,100,2.45,101,3.012,120,2.496,175,1.361,209,2.003,454,3.283,455,3.967,456,3.967,457,3.967,458,3.967,459,3.967]],["title/properties.html",[242,0.779,363,2.123]],["body/properties.html",[7,0.036,46,0.032,47,0.032,242,0.978,404,3.825,443,3.825,450,3.825,460,4.622,461,4.622,462,4.622]],["title/miscellaneous/variables.html",[389,1.614,463,3.047]],["body/miscellaneous/variables.html",[7,0.036,46,0.03,47,0.03,52,0.422,66,0.643,80,1.591,88,0.884,163,0.937,176,1.306,190,1.747,191,1.919,193,1.747,389,2.63,391,4.546,463,3.46,464,5.493,465,5.493]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/LoginRequest.html":{},"classes/LoginRequestDto.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"classes/RegisterRequestDto.html":{},"interfaces/RegisterResponse.html":{},"classes/User.html":{},"interfaces/UserCreationAttrs.html":{},"interfaces/ValidateRequest.html":{},"classes/ValidateRequestDto.html":{},"interfaces/ValidateResponse.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":352,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":461,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":384,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":375,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":374,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":378,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":356,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":355,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":354,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":353,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":358,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":359,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":456,"title":{},"body":{"overview.html":{}}}],["1.6.8",{"_index":366,"title":{},"body":{"dependencies.html":{}}}],["16.0.1",{"_index":377,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":455,"title":{},"body":{"overview.html":{}}}],["2.2.0",{"_index":368,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":372,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":457,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":386,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":379,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":458,"title":{},"body":{"overview.html":{}}}],["6.21.3",{"_index":388,"title":{},"body":{"dependencies.html":{}}}],["7.5.6",{"_index":387,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":314,"title":{},"body":{"classes/LoginRequestDto.html":{},"classes/RegisterRequestDto.html":{}}}],["8.7.3",{"_index":381,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":459,"title":{},"body":{"overview.html":{}}}],["9.0.0",{"_index":370,"title":{},"body":{"dependencies.html":{}}}],["9.0.8",{"_index":367,"title":{},"body":{"dependencies.html":{}}}],["allownull",{"_index":329,"title":{},"body":{"classes/User.html":{},"interfaces/UserCreationAttrs.html":{}}}],["already",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{}}}],["amazing",{"_index":433,"title":{},"body":{"index.html":{}}}],["app",{"_index":410,"title":{},"body":{"index.html":{}}}],["applications",{"_index":403,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argumentshost",{"_index":216,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["async",{"_index":113,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtService.html":{}}}],["auth",{"_index":191,"title":{},"body":{"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{},"miscellaneous/variables.html":{}}}],["auth.controller",{"_index":107,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.pb",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginRequestDto.html":{},"classes/RegisterRequestDto.html":{},"classes/ValidateRequestDto.html":{}}}],["auth/auth.module",{"_index":22,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/model/user.entity",{"_index":24,"title":{},"body":{"modules/AppModule.html":{}}}],["auth_package_name",{"_index":193,"title":{},"body":{"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth_service_name",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":49,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":6,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":443,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":88,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["authserviceclient",{"_index":174,"title":{"interfaces/AuthServiceClient.html":{}},"body":{"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{},"coverage.html":{}}}],["authservicecontroller",{"_index":194,"title":{"interfaces/AuthServiceController.html":{}},"body":{"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{},"coverage.html":{}}}],["authservicecontrollermethods",{"_index":196,"title":{},"body":{"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["autoloadmodels",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{}}}],["backers",{"_index":434,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":265,"title":{},"body":{"injectables/JwtService.html":{}}}],["bcrypt.comparesync(password",{"_index":277,"title":{},"body":{"injectables/JwtService.html":{}}}],["bcrypt.gensaltsync(10",{"_index":280,"title":{},"body":{"injectables/JwtService.html":{}}}],["bcrypt.hashsync(password",{"_index":281,"title":{},"body":{"injectables/JwtService.html":{}}}],["bcryptjs",{"_index":266,"title":{},"body":{"injectables/JwtService.html":{},"dependencies.html":{}}}],["bemore",{"_index":313,"title":{},"body":{"classes/LoginRequestDto.html":{},"classes/RegisterRequestDto.html":{}}}],["boolean",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtService.html":{}}}],["bootstrap",{"_index":361,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":453,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":451,"title":{},"body":{"modules.html":{}}}],["building",{"_index":398,"title":{},"body":{"index.html":{}}}],["catch",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtService.html":{}}}],["catch(exception",{"_index":214,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":223,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["class",{"_index":45,"title":{"classes/HttpExceptionFilter.html":{},"classes/LoginRequestDto.html":{},"classes/RegisterRequestDto.html":{},"classes/User.html":{},"classes/ValidateRequestDto.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginRequestDto.html":{},"classes/RegisterRequestDto.html":{},"classes/User.html":{},"interfaces/UserCreationAttrs.html":{},"classes/ValidateRequestDto.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":209,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/LoginRequestDto.html":{},"classes/RegisterRequestDto.html":{},"classes/User.html":{},"classes/ValidateRequestDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":98,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":99,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["column",{"_index":335,"title":{},"body":{"classes/User.html":{},"interfaces/UserCreationAttrs.html":{}}}],["column({type",{"_index":326,"title":{},"body":{"classes/User.html":{}}}],["configmodule",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":104,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtService.html":{}}}],["configservice.get('jwt_expire",{"_index":117,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('jwt_secret",{"_index":115,"title":{},"body":{"modules/AuthModule.html":{}}}],["const",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtService.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{}}}],["constructor",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{}}}],["constructor(jwtservice",{"_index":287,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(repository",{"_index":249,"title":{},"body":{"injectables/JwtService.html":{}}}],["constructor(userrepo",{"_index":123,"title":{},"body":{"injectables/AuthService.html":{}}}],["controller",{"_index":48,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"coverage.html":{},"overview.html":{}}}],["controllers",{"_index":50,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["coverage",{"_index":348,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["ctx",{"_index":224,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":229,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":227,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["database",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["datatype",{"_index":336,"title":{},"body":{"classes/User.html":{},"interfaces/UserCreationAttrs.html":{}}}],["datatype.string",{"_index":345,"title":{},"body":{"classes/User.html":{},"interfaces/UserCreationAttrs.html":{}}}],["datatype.uuid",{"_index":343,"title":{},"body":{"classes/User.html":{},"interfaces/UserCreationAttrs.html":{}}}],["datatype.uuidv4",{"_index":344,"title":{},"body":{"classes/User.html":{},"interfaces/UserCreationAttrs.html":{}}}],["date().toisostring",{"_index":238,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["decode",{"_index":244,"title":{},"body":{"injectables/JwtService.html":{}}}],["decode(token",{"_index":252,"title":{},"body":{"injectables/JwtService.html":{}}}],["decoded",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtService.html":{}}}],["decoded.id",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["decoding",{"_index":268,"title":{},"body":{"injectables/JwtService.html":{}}}],["decorators",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"classes/LoginRequestDto.html":{},"classes/RegisterRequestDto.html":{},"classes/User.html":{},"classes/ValidateRequestDto.html":{}}}],["default",{"_index":464,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defaultvalue",{"_index":331,"title":{},"body":{"classes/User.html":{},"interfaces/UserCreationAttrs.html":{}}}],["defined",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginRequestDto.html":{},"classes/RegisterRequestDto.html":{},"classes/User.html":{},"classes/ValidateRequestDto.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":404,"title":{},"body":{"index.html":{},"properties.html":{}}}],["descriptor",{"_index":199,"title":{},"body":{"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{}}}],["development",{"_index":411,"title":{},"body":{"index.html":{}}}],["dialect",{"_index":27,"title":{},"body":{"modules/AppModule.html":{}}}],["documentation",{"_index":349,"title":{},"body":{"coverage.html":{}}}],["dotenv",{"_index":376,"title":{},"body":{"dependencies.html":{}}}],["dto/loginrequest.dto",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/registerrequest.dto",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/validaterequest.dto",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["e2e",{"_index":422,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":399,"title":{},"body":{"index.html":{}}}],["email",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"injectables/JwtService.html":{},"interfaces/LoginRequest.html":{},"classes/LoginRequestDto.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"classes/RegisterRequestDto.html":{},"interfaces/RegisterResponse.html":{},"classes/User.html":{},"interfaces/UserCreationAttrs.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{}}}],["encode",{"_index":278,"title":{},"body":{"injectables/JwtService.html":{}}}],["encodepassword",{"_index":245,"title":{},"body":{"injectables/JwtService.html":{}}}],["encodepassword(password",{"_index":254,"title":{},"body":{"injectables/JwtService.html":{}}}],["err",{"_index":285,"title":{},"body":{"injectables/JwtService.html":{}}}],["error",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtService.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{}}}],["error.message",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{}}}],["exception",{"_index":218,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":211,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:7",{"_index":217,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getresponse",{"_index":232,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":230,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":213,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exists",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":116,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/LoginRequest.html":{},"classes/LoginRequestDto.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"classes/RegisterRequestDto.html":{},"interfaces/RegisterResponse.html":{},"classes/User.html":{},"interfaces/UserCreationAttrs.html":{},"interfaces/ValidateRequest.html":{},"classes/ValidateRequestDto.html":{},"interfaces/ValidateResponse.html":{}}}],["express",{"_index":222,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"dependencies.html":{}}}],["extends",{"_index":297,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/User.html":{},"interfaces/UserCreationAttrs.html":{}}}],["extractjwt",{"_index":294,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":301,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":305,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/User.html":{},"interfaces/UserCreationAttrs.html":{}}}],["file",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/LoginRequest.html":{},"classes/LoginRequestDto.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"classes/RegisterRequestDto.html":{},"interfaces/RegisterResponse.html":{},"classes/User.html":{},"interfaces/UserCreationAttrs.html":{},"interfaces/ValidateRequest.html":{},"classes/ValidateRequestDto.html":{},"interfaces/ValidateResponse.html":{},"coverage.html":{}}}],["forbidden",{"_index":283,"title":{},"body":{"injectables/JwtService.html":{}}}],["found",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["framework",{"_index":397,"title":{},"body":{"index.html":{}}}],["function",{"_index":195,"title":{},"body":{"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{},"coverage.html":{}}}],["functions",{"_index":390,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":272,"title":{},"body":{"injectables/JwtService.html":{}}}],["generatetoken",{"_index":246,"title":{},"body":{"injectables/JwtService.html":{}}}],["generatetoken(user",{"_index":256,"title":{},"body":{"injectables/JwtService.html":{}}}],["getting",{"_index":393,"title":{"index.html":{}},"body":{}}],["grow",{"_index":429,"title":{},"body":{"index.html":{}}}],["grpc/grpc",{"_index":364,"title":{},"body":{"dependencies.html":{}}}],["grpcmethod",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{}}}],["grpcmethod('authservice",{"_index":201,"title":{},"body":{"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{}}}],["grpcmethod(auth_service_name",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{}}}],["grpcmethods",{"_index":197,"title":{},"body":{"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{}}}],["grpcstreammethod",{"_index":188,"title":{},"body":{"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{}}}],["grpcstreammethod('authservice",{"_index":204,"title":{},"body":{"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{}}}],["grpcstreammethods",{"_index":203,"title":{},"body":{"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{}}}],["here",{"_index":440,"title":{},"body":{"index.html":{}}}],["host",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"classes/HttpExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":225,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpargumentshost",{"_index":219,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexception",{"_index":215,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexceptionfilter",{"_index":208,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["https://nestjs.com",{"_index":447,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{}}}],["httpstatus.bad_request",{"_index":231,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpstatus.conflict",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpstatus.created",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpstatus.forbidden",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpstatus.internal_server_error",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpstatus.not_found",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpstatus.ok",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{}}}],["id",{"_index":270,"title":{},"body":{"injectables/JwtService.html":{},"classes/User.html":{},"interfaces/UserCreationAttrs.html":{}}}],["identifier",{"_index":350,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":304,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":212,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/LoginRequestDto.html":{},"classes/RegisterRequestDto.html":{},"classes/ValidateRequestDto.html":{}}}],["import",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/LoginRequest.html":{},"classes/LoginRequestDto.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"classes/RegisterRequestDto.html":{},"interfaces/RegisterResponse.html":{},"classes/User.html":{},"interfaces/UserCreationAttrs.html":{},"interfaces/ValidateRequest.html":{},"classes/ValidateRequestDto.html":{},"interfaces/ValidateResponse.html":{}}}],["imports",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["index",{"_index":52,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/LoginRequest.html":{},"classes/LoginRequestDto.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"classes/RegisterRequestDto.html":{},"interfaces/RegisterResponse.html":{},"classes/User.html":{},"interfaces/UserCreationAttrs.html":{},"interfaces/ValidateRequest.html":{},"classes/ValidateRequestDto.html":{},"interfaces/ValidateResponse.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":11,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/LoginRequest.html":{},"classes/LoginRequestDto.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"classes/RegisterRequestDto.html":{},"interfaces/RegisterResponse.html":{},"classes/User.html":{},"interfaces/UserCreationAttrs.html":{},"interfaces/ValidateRequest.html":{},"classes/ValidateRequestDto.html":{},"interfaces/ValidateResponse.html":{}}}],["inject",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["inject(authservice",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["inject(jwtservice",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["injectable",{"_index":119,"title":{"injectables/AuthService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["injectables",{"_index":120,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"overview.html":{}}}],["injectmodel",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtService.html":{}}}],["injectmodel(user",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtService.html":{}}}],["installation",{"_index":407,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":409,"title":{},"body":{"index.html":{}}}],["interface",{"_index":173,"title":{"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/UserCreationAttrs.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{}},"body":{"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"classes/User.html":{},"interfaces/UserCreationAttrs.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{},"coverage.html":{}}}],["interfaces",{"_index":175,"title":{},"body":{"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/UserCreationAttrs.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{},"overview.html":{}}}],["invalid",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtService.html":{}}}],["isemail",{"_index":308,"title":{},"body":{"classes/LoginRequestDto.html":{},"classes/RegisterRequestDto.html":{}}}],["ispasswordvalid",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtService.html":{}}}],["ispasswordvalid(password",{"_index":258,"title":{},"body":{"injectables/JwtService.html":{}}}],["isstring",{"_index":317,"title":{},"body":{"classes/LoginRequestDto.html":{},"classes/RegisterRequestDto.html":{},"classes/ValidateRequestDto.html":{}}}],["isstring()@minlength(8",{"_index":312,"title":{},"body":{"classes/LoginRequestDto.html":{},"classes/RegisterRequestDto.html":{}}}],["join",{"_index":436,"title":{},"body":{"index.html":{}}}],["js",{"_index":365,"title":{},"body":{"dependencies.html":{}}}],["jwt",{"_index":243,"title":{},"body":{"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.service",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwt_secret",{"_index":303,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtfromrequest",{"_index":300,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":105,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":111,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":100,"title":{"injectables/JwtService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtstrategy",{"_index":101,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":444,"title":{},"body":{"index.html":{}}}],["license",{"_index":450,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":426,"title":{},"body":{"index.html":{}}}],["logging",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["login",{"_index":55,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{}}}],["login(payload",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(request",{"_index":177,"title":{},"body":{"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{}}}],["login(undefined",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginrequest",{"_index":178,"title":{"interfaces/LoginRequest.html":{}},"body":{"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"classes/LoginRequestDto.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{},"coverage.html":{}}}],["loginrequestdto",{"_index":59,"title":{"classes/LoginRequestDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginRequestDto.html":{},"coverage.html":{}}}],["loginresponse",{"_index":82,"title":{"interfaces/LoginResponse.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{},"coverage.html":{}}}],["matching",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/LoginRequest.html":{},"classes/LoginRequestDto.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"classes/RegisterRequestDto.html":{},"interfaces/RegisterResponse.html":{},"classes/User.html":{},"interfaces/UserCreationAttrs.html":{},"interfaces/ValidateRequest.html":{},"classes/ValidateRequestDto.html":{},"interfaces/ValidateResponse.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":309,"title":{},"body":{"classes/LoginRequestDto.html":{},"classes/RegisterRequestDto.html":{}}}],["metadata",{"_index":383,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":198,"title":{},"body":{"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{}}}],["method)(constructor.prototype[method",{"_index":202,"title":{},"body":{"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{}}}],["methods",{"_index":53,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["minlength",{"_index":318,"title":{},"body":{"classes/LoginRequestDto.html":{},"classes/RegisterRequestDto.html":{}}}],["minlength(8",{"_index":320,"title":{},"body":{"classes/LoginRequestDto.html":{},"classes/RegisterRequestDto.html":{}}}],["miscellaneous",{"_index":389,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":425,"title":{},"body":{"index.html":{}}}],["mode",{"_index":415,"title":{},"body":{"index.html":{}}}],["model",{"_index":325,"title":{},"body":{"classes/User.html":{},"interfaces/UserCreationAttrs.html":{}}}],["model/user.entity",{"_index":108,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["models",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":439,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":445,"title":{},"body":{"index.html":{}}}],["name",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["nest",{"_index":405,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":449,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/common/interfaces",{"_index":220,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["nestjs/config",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":369,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":106,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtService.html":{},"dependencies.html":{}}}],["nestjs/microservices",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":293,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":371,"title":{},"body":{"dependencies.html":{}}}],["nestjs/sequelize",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtService.html":{},"dependencies.html":{}}}],["new",{"_index":237,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["node.js",{"_index":396,"title":{},"body":{"index.html":{}}}],["npm",{"_index":408,"title":{},"body":{"index.html":{}}}],["null",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtService.html":{}}}],["number",{"_index":192,"title":{},"body":{"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{}}}],["observable",{"_index":181,"title":{},"body":{"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{}}}],["open",{"_index":427,"title":{},"body":{"index.html":{}}}],["optional",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["out",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"overview.html":{}}}],["overview",{"_index":454,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":363,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["parameters",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["passport",{"_index":296,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":292,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":298,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"injectables/JwtService.html":{},"interfaces/LoginRequest.html":{},"classes/LoginRequestDto.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"classes/RegisterRequestDto.html":{},"interfaces/RegisterResponse.html":{},"classes/User.html":{},"interfaces/UserCreationAttrs.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{}}}],["path",{"_index":239,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["payload",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{}}}],["pg",{"_index":380,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":437,"title":{},"body":{"index.html":{}}}],["port",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres",{"_index":28,"title":{},"body":{"modules/AppModule.html":{}}}],["primarykey",{"_index":332,"title":{},"body":{"classes/User.html":{},"interfaces/UserCreationAttrs.html":{}}}],["private",{"_index":54,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["process.env.postgres_db",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.postgres_host",{"_index":30,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.postgres_password",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.postgres_port",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.postgres_user",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["production",{"_index":417,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":395,"title":{},"body":{"index.html":{}}}],["project",{"_index":428,"title":{},"body":{"index.html":{}}}],["promise",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{}}}],["properties",{"_index":242,"title":{"properties.html":{}},"body":{"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/LoginRequest.html":{},"classes/LoginRequestDto.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"classes/RegisterRequestDto.html":{},"interfaces/RegisterResponse.html":{},"classes/User.html":{},"interfaces/UserCreationAttrs.html":{},"interfaces/ValidateRequest.html":{},"classes/ValidateRequestDto.html":{},"interfaces/ValidateResponse.html":{},"properties.html":{}}}],["protobufpackage",{"_index":190,"title":{},"body":{"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["providers",{"_index":103,"title":{},"body":{"modules/AuthModule.html":{}}}],["public",{"_index":122,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["read",{"_index":438,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["reflect",{"_index":382,"title":{},"body":{"dependencies.html":{}}}],["reflect.getownpropertydescriptor(constructor.prototype",{"_index":200,"title":{},"body":{"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{}}}],["register",{"_index":56,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{}}}],["register(payload",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(request",{"_index":182,"title":{},"body":{"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{}}}],["register(undefined",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{}}}],["registerrequest",{"_index":183,"title":{"interfaces/RegisterRequest.html":{}},"body":{"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"classes/RegisterRequestDto.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{},"coverage.html":{}}}],["registerrequestdto",{"_index":72,"title":{"classes/RegisterRequestDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterRequestDto.html":{},"coverage.html":{}}}],["registerresponse",{"_index":81,"title":{"interfaces/RegisterResponse.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{},"coverage.html":{}}}],["repository",{"_index":251,"title":{},"body":{"injectables/JwtService.html":{},"index.html":{}}}],["req",{"_index":228,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["req.url",{"_index":240,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request",{"_index":180,"title":{},"body":{"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"classes/HttpExceptionFilter.html":{}}}],["res",{"_index":226,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["res.message",{"_index":233,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["res.status(status).json",{"_index":234,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["reset",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"overview.html":{}}}],["response",{"_index":221,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["results",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/LoginRequest.html":{},"classes/LoginRequestDto.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"classes/RegisterRequestDto.html":{},"interfaces/RegisterResponse.html":{},"classes/User.html":{},"interfaces/UserCreationAttrs.html":{},"interfaces/ValidateRequest.html":{},"classes/ValidateRequestDto.html":{},"interfaces/ValidateResponse.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{}}}],["returns",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["rimraf",{"_index":385,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":412,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":189,"title":{},"body":{"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{},"dependencies.html":{}}}],["salt",{"_index":279,"title":{},"body":{"injectables/JwtService.html":{}}}],["scalable",{"_index":400,"title":{},"body":{"index.html":{}}}],["secret",{"_index":114,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":302,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["sequelize",{"_index":338,"title":{},"body":{"classes/User.html":{},"interfaces/UserCreationAttrs.html":{},"dependencies.html":{}}}],["sequelizemodule",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["sequelizemodule.forfeature([user",{"_index":118,"title":{},"body":{"modules/AuthModule.html":{}}}],["sequelizemodule.forroot",{"_index":26,"title":{},"body":{"modules/AppModule.html":{}}}],["server",{"_index":401,"title":{},"body":{"index.html":{}}}],["service",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["service/auth.service",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["service/jwt.service",{"_index":109,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["side",{"_index":402,"title":{},"body":{"index.html":{}}}],["source",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/LoginRequest.html":{},"classes/LoginRequestDto.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"classes/RegisterRequestDto.html":{},"interfaces/RegisterResponse.html":{},"classes/User.html":{},"interfaces/UserCreationAttrs.html":{},"interfaces/ValidateRequest.html":{},"classes/ValidateRequestDto.html":{},"interfaces/ValidateResponse.html":{},"index.html":{}}}],["sponsors",{"_index":431,"title":{},"body":{"index.html":{}}}],["src/.../auth.pb.ts",{"_index":391,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":392,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.module.ts",{"_index":14,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":51,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:17",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:22",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:27",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":102,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.pb.ts",{"_index":176,"title":{},"body":{"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/auth/auth.pb.ts:41",{"_index":184,"title":{},"body":{"interfaces/AuthServiceClient.html":{}}}],["src/auth/auth.pb.ts:43",{"_index":179,"title":{},"body":{"interfaces/AuthServiceClient.html":{}}}],["src/auth/auth.pb.ts:45",{"_index":187,"title":{},"body":{"interfaces/AuthServiceClient.html":{}}}],["src/auth/auth.pb.ts:49",{"_index":206,"title":{},"body":{"interfaces/AuthServiceController.html":{}}}],["src/auth/auth.pb.ts:51",{"_index":205,"title":{},"body":{"interfaces/AuthServiceController.html":{}}}],["src/auth/auth.pb.ts:53",{"_index":207,"title":{},"body":{"interfaces/AuthServiceController.html":{}}}],["src/auth/dto/loginrequest.dto.ts",{"_index":307,"title":{},"body":{"classes/LoginRequestDto.html":{},"coverage.html":{}}}],["src/auth/dto/loginrequest.dto.ts:10",{"_index":316,"title":{},"body":{"classes/LoginRequestDto.html":{}}}],["src/auth/dto/loginrequest.dto.ts:6",{"_index":311,"title":{},"body":{"classes/LoginRequestDto.html":{}}}],["src/auth/dto/registerrequest.dto.ts",{"_index":321,"title":{},"body":{"classes/RegisterRequestDto.html":{},"coverage.html":{}}}],["src/auth/dto/registerrequest.dto.ts:10",{"_index":323,"title":{},"body":{"classes/RegisterRequestDto.html":{}}}],["src/auth/dto/registerrequest.dto.ts:6",{"_index":322,"title":{},"body":{"classes/RegisterRequestDto.html":{}}}],["src/auth/dto/validaterequest.dto.ts",{"_index":346,"title":{},"body":{"classes/ValidateRequestDto.html":{},"coverage.html":{}}}],["src/auth/dto/validaterequest.dto.ts:6",{"_index":347,"title":{},"body":{"classes/ValidateRequestDto.html":{}}}],["src/auth/filter/http",{"_index":210,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/auth/model/user.entity.ts",{"_index":324,"title":{},"body":{"classes/User.html":{},"interfaces/UserCreationAttrs.html":{},"coverage.html":{}}}],["src/auth/model/user.entity.ts:11",{"_index":333,"title":{},"body":{"classes/User.html":{}}}],["src/auth/model/user.entity.ts:14",{"_index":330,"title":{},"body":{"classes/User.html":{}}}],["src/auth/model/user.entity.ts:17",{"_index":334,"title":{},"body":{"classes/User.html":{}}}],["src/auth/service/auth.service.ts",{"_index":121,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/service/auth.service.ts:11",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/service/auth.service.ts:20",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/service/auth.service.ts:36",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/service/auth.service.ts:58",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/service/jwt.service.ts",{"_index":241,"title":{},"body":{"injectables/JwtService.html":{},"coverage.html":{}}}],["src/auth/service/jwt.service.ts:10",{"_index":250,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/service/jwt.service.ts:22",{"_index":253,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/service/jwt.service.ts:27",{"_index":262,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/service/jwt.service.ts:32",{"_index":257,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/service/jwt.service.ts:37",{"_index":260,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/service/jwt.service.ts:42",{"_index":255,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/service/jwt.service.ts:49",{"_index":264,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/strategy/jwt.strategy.ts",{"_index":286,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategy/jwt.strategy.ts:11",{"_index":291,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategy/jwt.strategy.ts:20",{"_index":290,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategy/jwt.strategy.ts:8",{"_index":288,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/main.ts",{"_index":360,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["start",{"_index":413,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":416,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":418,"title":{},"body":{"index.html":{}}}],["started",{"_index":394,"title":{"index.html":{}},"body":{}}],["starter",{"_index":406,"title":{},"body":{"index.html":{}}}],["statements",{"_index":351,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{}}}],["statuscode",{"_index":235,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["stay",{"_index":441,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":295,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["strategy/jwt.strategy",{"_index":110,"title":{},"body":{"modules/AuthModule.html":{}}}],["string",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/LoginRequest.html":{},"classes/LoginRequestDto.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"classes/RegisterRequestDto.html":{},"interfaces/RegisterResponse.html":{},"classes/User.html":{},"interfaces/UserCreationAttrs.html":{},"interfaces/ValidateRequest.html":{},"classes/ValidateRequestDto.html":{},"interfaces/ValidateResponse.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":299,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":432,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":452,"title":{},"body":{"modules.html":{}}}],["symbols",{"_index":315,"title":{},"body":{"classes/LoginRequestDto.html":{},"classes/RegisterRequestDto.html":{}}}],["synchronize",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":337,"title":{},"body":{"classes/User.html":{},"interfaces/UserCreationAttrs.html":{},"coverage.html":{}}}],["tablename",{"_index":341,"title":{},"body":{"classes/User.html":{},"interfaces/UserCreationAttrs.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":362,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":421,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":424,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":423,"title":{},"body":{"index.html":{}}}],["tests",{"_index":420,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":430,"title":{},"body":{"index.html":{}}}],["this.jwt",{"_index":267,"title":{},"body":{"injectables/JwtService.html":{}}}],["this.jwt.decode(token",{"_index":269,"title":{},"body":{"injectables/JwtService.html":{}}}],["this.jwt.sign",{"_index":273,"title":{},"body":{"injectables/JwtService.html":{}}}],["this.jwt.verify(token",{"_index":284,"title":{},"body":{"injectables/JwtService.html":{}}}],["this.jwtservice.encodepassword(password",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.generatetoken(user",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.ispasswordvalid(password",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.validateuser(decoded",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.validateuser(token",{"_index":306,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.jwtservice.verify(token",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.repository.findone(decoded.id",{"_index":271,"title":{},"body":{"injectables/JwtService.html":{}}}],["this.service.login(payload",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.service.register(payload",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.service.validate(payload",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userrepo.create",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepo.findone",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":282,"title":{},"body":{"injectables/JwtService.html":{}}}],["timestamp",{"_index":236,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["token",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"classes/ValidateRequestDto.html":{},"interfaces/ValidateResponse.html":{}}}],["touch",{"_index":442,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":373,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"classes/User.html":{},"interfaces/UserCreationAttrs.html":{}}}],["try",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtService.html":{}}}],["twitter",{"_index":448,"title":{},"body":{"index.html":{}}}],["type",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/LoginRequest.html":{},"classes/LoginRequestDto.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"classes/RegisterRequestDto.html":{},"interfaces/RegisterResponse.html":{},"classes/User.html":{},"interfaces/UserCreationAttrs.html":{},"interfaces/ValidateRequest.html":{},"classes/ValidateRequestDto.html":{},"interfaces/ValidateResponse.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtService.html":{}}}],["typescript",{"_index":339,"title":{},"body":{"classes/User.html":{},"interfaces/UserCreationAttrs.html":{},"index.html":{}}}],["undefined",{"_index":327,"title":{},"body":{"classes/User.html":{}}}],["unique",{"_index":328,"title":{},"body":{"classes/User.html":{},"interfaces/UserCreationAttrs.html":{}}}],["unit",{"_index":419,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":462,"title":{},"body":{"properties.html":{}}}],["usefactory",{"_index":112,"title":{},"body":{"modules/AuthModule.html":{}}}],["user",{"_index":23,"title":{"classes/User.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/User.html":{},"interfaces/UserCreationAttrs.html":{},"coverage.html":{}}}],["user's",{"_index":276,"title":{},"body":{"injectables/JwtService.html":{}}}],["user.email",{"_index":275,"title":{},"body":{"injectables/JwtService.html":{}}}],["user.id",{"_index":274,"title":{},"body":{"injectables/JwtService.html":{}}}],["user.password",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["usercreationattrs",{"_index":340,"title":{"interfaces/UserCreationAttrs.html":{}},"body":{"classes/User.html":{},"interfaces/UserCreationAttrs.html":{},"coverage.html":{}}}],["userid",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{}}}],["username",{"_index":33,"title":{},"body":{"modules/AppModule.html":{}}}],["userpassword",{"_index":259,"title":{},"body":{"injectables/JwtService.html":{}}}],["userrepo",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{}}}],["users",{"_index":342,"title":{},"body":{"classes/User.html":{},"interfaces/UserCreationAttrs.html":{}}}],["valid",{"_index":310,"title":{},"body":{"classes/LoginRequestDto.html":{},"classes/RegisterRequestDto.html":{}}}],["validate",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{}}}],["validate(payload",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{}}}],["validate(request",{"_index":185,"title":{},"body":{"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{}}}],["validate(token",{"_index":289,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(undefined",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{}}}],["validaterequest",{"_index":186,"title":{"interfaces/ValidateRequest.html":{}},"body":{"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"classes/ValidateRequestDto.html":{},"interfaces/ValidateResponse.html":{},"coverage.html":{}}}],["validaterequestdto",{"_index":75,"title":{"classes/ValidateRequestDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ValidateRequestDto.html":{},"coverage.html":{}}}],["validateresponse",{"_index":83,"title":{"interfaces/ValidateResponse.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthServiceClient.html":{},"interfaces/AuthServiceController.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterRequest.html":{},"interfaces/RegisterResponse.html":{},"interfaces/ValidateRequest.html":{},"interfaces/ValidateResponse.html":{},"coverage.html":{}}}],["validateuser",{"_index":247,"title":{},"body":{"injectables/JwtService.html":{}}}],["validateuser(decoded",{"_index":261,"title":{},"body":{"injectables/JwtService.html":{}}}],["validator",{"_index":319,"title":{},"body":{"classes/LoginRequestDto.html":{},"classes/RegisterRequestDto.html":{},"classes/ValidateRequestDto.html":{},"dependencies.html":{}}}],["value",{"_index":465,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":357,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":463,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verify",{"_index":248,"title":{},"body":{"injectables/JwtService.html":{}}}],["verify(token",{"_index":263,"title":{},"body":{"injectables/JwtService.html":{}}}],["version",{"_index":460,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":414,"title":{},"body":{"index.html":{}}}],["website",{"_index":446,"title":{},"body":{"index.html":{}}}],["wrong",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["you'd",{"_index":435,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { SequelizeModule } from '@nestjs/sequelize'\nimport { ConfigModule } from '@nestjs/config'\nimport { AuthModule } from './auth/auth.module'\nimport { User } from './auth/model/user.entity'\n\n@Module({\n    imports: [\n        ConfigModule.forRoot(),\n        SequelizeModule.forRoot({\n            dialect: 'postgres',\n            host: process.env.POSTGRES_HOST,\n            port: +process.env.POSTGRES_PORT,\n            username: process.env.POSTGRES_USER,\n            password: process.env.POSTGRES_PASSWORD,\n            database: process.env.POSTGRES_DB,\n            models: [User],\n            autoLoadModels: true,\n            synchronize: true,\n            logging: true,\n        }),\n        AuthModule,\n    ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                login\n                            \n                            \n                                    Private\n                                register\n                            \n                            \n                                    Private\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(payload: LoginRequestDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod(AUTH_SERVICE_NAME, 'Login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                LoginRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(payload: RegisterRequestDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod(AUTH_SERVICE_NAME, 'Register')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                RegisterRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: ValidateRequestDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod(AUTH_SERVICE_NAME, 'Validate')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                ValidateRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Inject } from '@nestjs/common'\nimport { GrpcMethod } from '@nestjs/microservices'\nimport { AUTH_SERVICE_NAME, RegisterResponse, LoginResponse, ValidateResponse } from './auth.pb'\nimport { LoginRequestDto } from './dto/loginRequest.dto'\nimport { RegisterRequestDto } from './dto/registerRequest.dto'\nimport { ValidateRequestDto } from './dto/validateRequest.dto'\nimport { AuthService } from './service/auth.service'\n\n@Controller()\nexport class AuthController {\n    constructor(\n        @Inject(AuthService)\n        private readonly service: AuthService,\n    ) {}\n\n    @GrpcMethod(AUTH_SERVICE_NAME, 'Register')\n    private register(payload: RegisterRequestDto): Promise {\n        return this.service.register(payload)\n    }\n\n    @GrpcMethod(AUTH_SERVICE_NAME, 'Login')\n    private login(payload: LoginRequestDto): Promise {\n        return this.service.login(payload)\n    }\n\n    @GrpcMethod(AUTH_SERVICE_NAME, 'Validate')\n    private validate(payload: ValidateRequestDto): Promise {\n        return this.service.validate(payload)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService\n\nAuthService\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtService\n\nJwtService\n\nAuthModule -->\n\nJwtService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { ConfigModule, ConfigService } from '@nestjs/config'\nimport { JwtModule } from '@nestjs/jwt'\nimport { SequelizeModule } from '@nestjs/sequelize'\nimport { AuthController } from './auth.controller'\nimport { User } from './model/user.entity'\nimport { AuthService } from './service/auth.service'\nimport { JwtService } from './service/jwt.service'\nimport { JwtStrategy } from './strategy/jwt.strategy'\n\n@Module({\n    imports: [\n        ConfigModule,\n        JwtModule.registerAsync({\n            imports: [ConfigModule],\n            useFactory: async (configService: ConfigService) => {\n                return {\n                    secret: configService.get('JWT_SECRET'),\n                    expiresIn: configService.get('JWT_EXPIRE'),\n                }\n            },\n            inject: [ConfigService],\n        }),\n        SequelizeModule.forFeature([User]),\n    ],\n    controllers: [AuthController],\n    providers: [AuthService, JwtService, JwtStrategy],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/service/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                login\n                            \n                            \n                                    Public\n                                    Async\n                                register\n                            \n                            \n                                    Public\n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepo, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/service/auth.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepo\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                        JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(undefined: LoginRequestDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/service/auth.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                LoginRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(undefined: RegisterRequestDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/service/auth.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                RegisterRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(undefined: ValidateRequestDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/service/auth.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                ValidateRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpStatus, Inject, Injectable } from '@nestjs/common'\nimport { JwtService } from './jwt.service'\nimport { LoginResponse, RegisterResponse, ValidateResponse } from '../auth.pb'\nimport { InjectModel } from '@nestjs/sequelize'\nimport { User } from '../model/user.entity'\nimport { RegisterRequestDto } from '../dto/registerRequest.dto'\nimport { LoginRequestDto } from '../dto/loginRequest.dto'\nimport { ValidateRequestDto } from '../dto/validateRequest.dto'\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        @InjectModel(User)\n        private readonly userRepo: typeof User,\n\n        @Inject(JwtService)\n        private readonly jwtService: JwtService,\n    ) {}\n\n    public async register({ email, password }: RegisterRequestDto): Promise {\n        try {\n            let user: User = await this.userRepo.findOne({ where: { email } })\n\n            if (user) {\n                return { status: HttpStatus.CONFLICT, error: ['User with this email already exists'] }\n            }\n\n            user = await this.userRepo.create({ email, password: this.jwtService.encodePassword(password) })\n\n            return { status: HttpStatus.CREATED, error: null }\n        } catch (error) {\n            return { status: HttpStatus.INTERNAL_SERVER_ERROR, error: [error.message] }\n        }\n    }\n\n    public async login({ email, password }: LoginRequestDto): Promise {\n        try {\n            const user: User = await this.userRepo.findOne({ where: { email } })\n\n            if (!user) {\n                return { status: HttpStatus.NOT_FOUND, error: ['User with this email not found'], token: null }\n            }\n\n            const isPasswordValid: boolean = this.jwtService.isPasswordValid(password, user.password)\n\n            if (!isPasswordValid) {\n                return { status: HttpStatus.NOT_FOUND, error: ['Password wrong'], token: null }\n            }\n\n            const token: string = this.jwtService.generateToken(user)\n\n            return { token, status: HttpStatus.OK, error: null }\n        } catch (error) {\n            return { status: HttpStatus.INTERNAL_SERVER_ERROR, error: [error.message], token: null }\n        }\n    }\n\n    public async validate({ token }: ValidateRequestDto): Promise {\n        try {\n            const decoded: User = await this.jwtService.verify(token)\n\n            if (!decoded) {\n                return { status: HttpStatus.FORBIDDEN, error: ['Token is invalid'], userId: null }\n            }\n\n            const user: User = await this.jwtService.validateUser(decoded)\n\n            if (!user) {\n                return { status: HttpStatus.CONFLICT, error: ['User not found'], userId: null }\n            }\n\n            return { status: HttpStatus.OK, error: null, userId: decoded.id }\n        } catch (error) {\n            return { status: HttpStatus.INTERNAL_SERVER_ERROR, error: [error.message], userId: null }\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthServiceClient.html":{"url":"interfaces/AuthServiceClient.html","title":"interface - AuthServiceClient","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthServiceClient\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.pb.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        login\n                                    \n                                \n                                \n                                    \n                                        register\n                                    \n                                \n                                \n                                    \n                                        validate\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(request: LoginRequest)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.pb.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                LoginRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(request: RegisterRequest)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.pb.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RegisterRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(request: ValidateRequest)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.pb.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                ValidateRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices'\nimport { Observable } from 'rxjs'\n\nexport const protobufPackage = 'auth'\n\nexport interface RegisterRequest {\n    email: string\n    password: string\n}\n\nexport interface RegisterResponse {\n    status: number\n    error: string[]\n}\n\nexport interface LoginRequest {\n    email: string\n    password: string\n}\n\nexport interface LoginResponse {\n    status: number\n    error: string[]\n    token: string\n}\n\nexport interface ValidateRequest {\n    token: string\n}\n\nexport interface ValidateResponse {\n    status: number\n    error: string[]\n    userId: string\n}\n\nexport const AUTH_PACKAGE_NAME = 'auth'\n\nexport interface AuthServiceClient {\n    register(request: RegisterRequest): Observable\n\n    login(request: LoginRequest): Observable\n\n    validate(request: ValidateRequest): Observable\n}\n\nexport interface AuthServiceController {\n    register(request: RegisterRequest): Promise | Observable | RegisterResponse\n\n    login(request: LoginRequest): Promise | Observable | LoginResponse\n\n    validate(request: ValidateRequest): Promise | Observable | ValidateResponse\n}\n\nexport function AuthServiceControllerMethods() {\n    return function (constructor: Function) {\n        const grpcMethods: string[] = ['register', 'login', 'validate']\n        for (const method of grpcMethods) {\n            const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)\n            GrpcMethod('AuthService', method)(constructor.prototype[method], method, descriptor)\n        }\n        const grpcStreamMethods: string[] = []\n        for (const method of grpcStreamMethods) {\n            const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)\n            GrpcStreamMethod('AuthService', method)(constructor.prototype[method], method, descriptor)\n        }\n    }\n}\n\nexport const AUTH_SERVICE_NAME = 'AuthService'\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthServiceController.html":{"url":"interfaces/AuthServiceController.html","title":"interface - AuthServiceController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthServiceController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.pb.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        login\n                                    \n                                \n                                \n                                    \n                                        register\n                                    \n                                \n                                \n                                    \n                                        validate\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(request: LoginRequest)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.pb.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                LoginRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise | Observable | LoginResponse\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(request: RegisterRequest)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.pb.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RegisterRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise | Observable | RegisterResponse\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(request: ValidateRequest)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.pb.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                ValidateRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise | Observable | ValidateResponse\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices'\nimport { Observable } from 'rxjs'\n\nexport const protobufPackage = 'auth'\n\nexport interface RegisterRequest {\n    email: string\n    password: string\n}\n\nexport interface RegisterResponse {\n    status: number\n    error: string[]\n}\n\nexport interface LoginRequest {\n    email: string\n    password: string\n}\n\nexport interface LoginResponse {\n    status: number\n    error: string[]\n    token: string\n}\n\nexport interface ValidateRequest {\n    token: string\n}\n\nexport interface ValidateResponse {\n    status: number\n    error: string[]\n    userId: string\n}\n\nexport const AUTH_PACKAGE_NAME = 'auth'\n\nexport interface AuthServiceClient {\n    register(request: RegisterRequest): Observable\n\n    login(request: LoginRequest): Observable\n\n    validate(request: ValidateRequest): Observable\n}\n\nexport interface AuthServiceController {\n    register(request: RegisterRequest): Promise | Observable | RegisterResponse\n\n    login(request: LoginRequest): Promise | Observable | LoginResponse\n\n    validate(request: ValidateRequest): Promise | Observable | ValidateResponse\n}\n\nexport function AuthServiceControllerMethods() {\n    return function (constructor: Function) {\n        const grpcMethods: string[] = ['register', 'login', 'validate']\n        for (const method of grpcMethods) {\n            const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)\n            GrpcMethod('AuthService', method)(constructor.prototype[method], method, descriptor)\n        }\n        const grpcStreamMethods: string[] = []\n        for (const method of grpcStreamMethods) {\n            const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)\n            GrpcStreamMethod('AuthService', method)(constructor.prototype[method], method, descriptor)\n        }\n    }\n}\n\nexport const AUTH_SERVICE_NAME = 'AuthService'\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/filter/http-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/filter/http-exception.filter.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { status: HttpStatus; error: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ExceptionFilter, Catch, ArgumentsHost, HttpException, HttpStatus } from '@nestjs/common'\nimport { HttpArgumentsHost } from '@nestjs/common/interfaces'\nimport { Request, Response } from 'express'\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n    catch(exception: HttpException, host: ArgumentsHost) {\n        const ctx: HttpArgumentsHost = host.switchToHttp()\n        const res: Response = ctx.getResponse()\n        const req: Request = ctx.getRequest()\n        const status: HttpStatus = exception.getStatus()\n\n        if (status === HttpStatus.BAD_REQUEST) {\n            const res: any = exception.getResponse()\n            return { status, error: res.message }\n        }\n\n        res.status(status).json({\n            statusCode: status,\n            timestamp: new Date().toISOString(),\n            path: req.url,\n        })\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtService.html":{"url":"injectables/JwtService.html","title":"injectable - JwtService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/service/jwt.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                jwt\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                decode\n                            \n                            \n                                    Public\n                                encodePassword\n                            \n                            \n                                    Public\n                                generateToken\n                            \n                            \n                                    Public\n                                isPasswordValid\n                            \n                            \n                                    Public\n                                    Async\n                                validateUser\n                            \n                            \n                                    Public\n                                    Async\n                                verify\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository, configService: ConfigService, jwt: Jwt)\n                    \n                \n                        \n                            \n                                Defined in src/auth/service/jwt.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwt\n                                                  \n                                                        \n                                                                    Jwt\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        decode\n                        \n                    \n                \n            \n            \n                \n                    \n                    decode(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/service/jwt.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        encodePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    encodePassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/service/jwt.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateToken(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/service/jwt.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        isPasswordValid\n                        \n                    \n                \n            \n            \n                \n                    \n                    isPasswordValid(password: string, userPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/service/jwt.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(decoded: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/service/jwt.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    decoded\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        verify\n                        \n                    \n                \n            \n            \n                \n                    \n                    verify(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/service/jwt.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        jwt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Jwt\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/service/jwt.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import * as bcrypt from 'bcryptjs'\nimport { Injectable } from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\nimport { JwtService as Jwt } from '@nestjs/jwt'\nimport { InjectModel } from '@nestjs/sequelize'\nimport { User } from '../model/user.entity'\n\n@Injectable()\nexport class JwtService {\n    private readonly jwt: Jwt\n\n    constructor(\n        @InjectModel(User)\n        private readonly repository: typeof User,\n        private readonly configService: ConfigService,\n        jwt: Jwt,\n    ) {\n        this.jwt = jwt\n    }\n\n    // Decoding the JWT Token\n    public async decode(token: string): Promise {\n        return this.jwt.decode(token, null)\n    }\n\n    // Get User by User ID we get from decode()\n    public async validateUser(decoded: any): Promise {\n        return this.repository.findOne(decoded.id)\n    }\n\n    // Generate JWT Token\n    public generateToken(user: User): string {\n        return this.jwt.sign({ id: user.id, email: user.email })\n    }\n\n    // Validate User's password\n    public isPasswordValid(password: string, userPassword: string): boolean {\n        return bcrypt.compareSync(password, userPassword)\n    }\n\n    // Encode User's password\n    public encodePassword(password: string): string {\n        const salt: string = bcrypt.genSaltSync(10)\n\n        return bcrypt.hashSync(password, salt)\n    }\n\n    // Validate JWT Token, throw forbidden error if JWT Token is invalid\n    public async verify(token: string): Promise {\n        try {\n            return this.jwt.verify(token)\n        } catch (err) {}\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategy/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                jwtService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/jwt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                        JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategy/jwt.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        jwtService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         JwtService\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(JwtService)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/strategy/jwt.strategy.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common'\nimport { PassportStrategy } from '@nestjs/passport'\nimport { ExtractJwt, Strategy } from 'passport-jwt'\nimport { User } from '../model/user.entity'\nimport { JwtService } from '../service/jwt.service'\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n    constructor(\n        @Inject(JwtService)\n        public readonly jwtService: JwtService,\n    ) {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            secretOrKey: 'JWT_SECRET',\n            ignoreExpiration: false,\n        })\n    }\n\n    private validate(token: string): Promise {\n        return this.jwtService.validateUser(token)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoginRequest.html":{"url":"interfaces/LoginRequest.html","title":"interface - LoginRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoginRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.pb.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices'\nimport { Observable } from 'rxjs'\n\nexport const protobufPackage = 'auth'\n\nexport interface RegisterRequest {\n    email: string\n    password: string\n}\n\nexport interface RegisterResponse {\n    status: number\n    error: string[]\n}\n\nexport interface LoginRequest {\n    email: string\n    password: string\n}\n\nexport interface LoginResponse {\n    status: number\n    error: string[]\n    token: string\n}\n\nexport interface ValidateRequest {\n    token: string\n}\n\nexport interface ValidateResponse {\n    status: number\n    error: string[]\n    userId: string\n}\n\nexport const AUTH_PACKAGE_NAME = 'auth'\n\nexport interface AuthServiceClient {\n    register(request: RegisterRequest): Observable\n\n    login(request: LoginRequest): Observable\n\n    validate(request: ValidateRequest): Observable\n}\n\nexport interface AuthServiceController {\n    register(request: RegisterRequest): Promise | Observable | RegisterResponse\n\n    login(request: LoginRequest): Promise | Observable | LoginResponse\n\n    validate(request: ValidateRequest): Promise | Observable | ValidateResponse\n}\n\nexport function AuthServiceControllerMethods() {\n    return function (constructor: Function) {\n        const grpcMethods: string[] = ['register', 'login', 'validate']\n        for (const method of grpcMethods) {\n            const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)\n            GrpcMethod('AuthService', method)(constructor.prototype[method], method, descriptor)\n        }\n        const grpcStreamMethods: string[] = []\n        for (const method of grpcStreamMethods) {\n            const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)\n            GrpcStreamMethod('AuthService', method)(constructor.prototype[method], method, descriptor)\n        }\n    }\n}\n\nexport const AUTH_SERVICE_NAME = 'AuthService'\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginRequestDto.html":{"url":"classes/LoginRequestDto.html","title":"class - LoginRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/loginRequest.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            LoginRequest\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail({}, {message: 'must be valid email'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/loginRequest.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8, {message: 'must bemore than 8 symbols'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/loginRequest.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, MinLength } from 'class-validator'\nimport { LoginRequest } from '../auth.pb'\n\nexport class LoginRequestDto implements LoginRequest {\n    @IsEmail({}, { message: 'must be valid email' })\n    email: string\n\n    @IsString()\n    @MinLength(8, { message: 'must bemore than 8 symbols' })\n    password: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoginResponse.html":{"url":"interfaces/LoginResponse.html","title":"interface - LoginResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoginResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.pb.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices'\nimport { Observable } from 'rxjs'\n\nexport const protobufPackage = 'auth'\n\nexport interface RegisterRequest {\n    email: string\n    password: string\n}\n\nexport interface RegisterResponse {\n    status: number\n    error: string[]\n}\n\nexport interface LoginRequest {\n    email: string\n    password: string\n}\n\nexport interface LoginResponse {\n    status: number\n    error: string[]\n    token: string\n}\n\nexport interface ValidateRequest {\n    token: string\n}\n\nexport interface ValidateResponse {\n    status: number\n    error: string[]\n    userId: string\n}\n\nexport const AUTH_PACKAGE_NAME = 'auth'\n\nexport interface AuthServiceClient {\n    register(request: RegisterRequest): Observable\n\n    login(request: LoginRequest): Observable\n\n    validate(request: ValidateRequest): Observable\n}\n\nexport interface AuthServiceController {\n    register(request: RegisterRequest): Promise | Observable | RegisterResponse\n\n    login(request: LoginRequest): Promise | Observable | LoginResponse\n\n    validate(request: ValidateRequest): Promise | Observable | ValidateResponse\n}\n\nexport function AuthServiceControllerMethods() {\n    return function (constructor: Function) {\n        const grpcMethods: string[] = ['register', 'login', 'validate']\n        for (const method of grpcMethods) {\n            const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)\n            GrpcMethod('AuthService', method)(constructor.prototype[method], method, descriptor)\n        }\n        const grpcStreamMethods: string[] = []\n        for (const method of grpcStreamMethods) {\n            const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)\n            GrpcStreamMethod('AuthService', method)(constructor.prototype[method], method, descriptor)\n        }\n    }\n}\n\nexport const AUTH_SERVICE_NAME = 'AuthService'\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RegisterRequest.html":{"url":"interfaces/RegisterRequest.html","title":"interface - RegisterRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RegisterRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.pb.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices'\nimport { Observable } from 'rxjs'\n\nexport const protobufPackage = 'auth'\n\nexport interface RegisterRequest {\n    email: string\n    password: string\n}\n\nexport interface RegisterResponse {\n    status: number\n    error: string[]\n}\n\nexport interface LoginRequest {\n    email: string\n    password: string\n}\n\nexport interface LoginResponse {\n    status: number\n    error: string[]\n    token: string\n}\n\nexport interface ValidateRequest {\n    token: string\n}\n\nexport interface ValidateResponse {\n    status: number\n    error: string[]\n    userId: string\n}\n\nexport const AUTH_PACKAGE_NAME = 'auth'\n\nexport interface AuthServiceClient {\n    register(request: RegisterRequest): Observable\n\n    login(request: LoginRequest): Observable\n\n    validate(request: ValidateRequest): Observable\n}\n\nexport interface AuthServiceController {\n    register(request: RegisterRequest): Promise | Observable | RegisterResponse\n\n    login(request: LoginRequest): Promise | Observable | LoginResponse\n\n    validate(request: ValidateRequest): Promise | Observable | ValidateResponse\n}\n\nexport function AuthServiceControllerMethods() {\n    return function (constructor: Function) {\n        const grpcMethods: string[] = ['register', 'login', 'validate']\n        for (const method of grpcMethods) {\n            const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)\n            GrpcMethod('AuthService', method)(constructor.prototype[method], method, descriptor)\n        }\n        const grpcStreamMethods: string[] = []\n        for (const method of grpcStreamMethods) {\n            const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)\n            GrpcStreamMethod('AuthService', method)(constructor.prototype[method], method, descriptor)\n        }\n    }\n}\n\nexport const AUTH_SERVICE_NAME = 'AuthService'\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterRequestDto.html":{"url":"classes/RegisterRequestDto.html","title":"class - RegisterRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/registerRequest.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            RegisterRequest\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail({}, {message: 'must be valid email'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/registerRequest.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8, {message: 'must bemore than 8 symbols'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/registerRequest.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, MinLength } from 'class-validator'\nimport { RegisterRequest } from '../auth.pb'\n\nexport class RegisterRequestDto implements RegisterRequest {\n    @IsEmail({}, { message: 'must be valid email' })\n    email: string\n\n    @IsString()\n    @MinLength(8, { message: 'must bemore than 8 symbols' })\n    password: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RegisterResponse.html":{"url":"interfaces/RegisterResponse.html","title":"interface - RegisterResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RegisterResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.pb.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices'\nimport { Observable } from 'rxjs'\n\nexport const protobufPackage = 'auth'\n\nexport interface RegisterRequest {\n    email: string\n    password: string\n}\n\nexport interface RegisterResponse {\n    status: number\n    error: string[]\n}\n\nexport interface LoginRequest {\n    email: string\n    password: string\n}\n\nexport interface LoginResponse {\n    status: number\n    error: string[]\n    token: string\n}\n\nexport interface ValidateRequest {\n    token: string\n}\n\nexport interface ValidateResponse {\n    status: number\n    error: string[]\n    userId: string\n}\n\nexport const AUTH_PACKAGE_NAME = 'auth'\n\nexport interface AuthServiceClient {\n    register(request: RegisterRequest): Observable\n\n    login(request: LoginRequest): Observable\n\n    validate(request: ValidateRequest): Observable\n}\n\nexport interface AuthServiceController {\n    register(request: RegisterRequest): Promise | Observable | RegisterResponse\n\n    login(request: LoginRequest): Promise | Observable | LoginResponse\n\n    validate(request: ValidateRequest): Promise | Observable | ValidateResponse\n}\n\nexport function AuthServiceControllerMethods() {\n    return function (constructor: Function) {\n        const grpcMethods: string[] = ['register', 'login', 'validate']\n        for (const method of grpcMethods) {\n            const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)\n            GrpcMethod('AuthService', method)(constructor.prototype[method], method, descriptor)\n        }\n        const grpcStreamMethods: string[] = []\n        for (const method of grpcStreamMethods) {\n            const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)\n            GrpcStreamMethod('AuthService', method)(constructor.prototype[method], method, descriptor)\n        }\n    }\n}\n\nexport const AUTH_SERVICE_NAME = 'AuthService'\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/model/user.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Model\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, unique: true, allowNull: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/model/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, defaultValue: undefined, primaryKey: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/model/user.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, allowNull: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/model/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, DataType, Model, Table } from 'sequelize-typescript'\n\ninterface UserCreationAttrs {\n    email: string\n    password: string\n}\n\n@Table({ tableName: 'users' })\nexport class User extends Model {\n    @Column({ type: DataType.UUID, defaultValue: DataType.UUIDV4, primaryKey: true })\n    id: string\n\n    @Column({ type: DataType.STRING, unique: true, allowNull: false })\n    email!: string\n\n    @Column({ type: DataType.STRING, allowNull: false })\n    password!: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserCreationAttrs.html":{"url":"interfaces/UserCreationAttrs.html","title":"interface - UserCreationAttrs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserCreationAttrs\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/model/user.entity.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Column, DataType, Model, Table } from 'sequelize-typescript'\n\ninterface UserCreationAttrs {\n    email: string\n    password: string\n}\n\n@Table({ tableName: 'users' })\nexport class User extends Model {\n    @Column({ type: DataType.UUID, defaultValue: DataType.UUIDV4, primaryKey: true })\n    id: string\n\n    @Column({ type: DataType.STRING, unique: true, allowNull: false })\n    email!: string\n\n    @Column({ type: DataType.STRING, allowNull: false })\n    password!: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidateRequest.html":{"url":"interfaces/ValidateRequest.html","title":"interface - ValidateRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ValidateRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.pb.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices'\nimport { Observable } from 'rxjs'\n\nexport const protobufPackage = 'auth'\n\nexport interface RegisterRequest {\n    email: string\n    password: string\n}\n\nexport interface RegisterResponse {\n    status: number\n    error: string[]\n}\n\nexport interface LoginRequest {\n    email: string\n    password: string\n}\n\nexport interface LoginResponse {\n    status: number\n    error: string[]\n    token: string\n}\n\nexport interface ValidateRequest {\n    token: string\n}\n\nexport interface ValidateResponse {\n    status: number\n    error: string[]\n    userId: string\n}\n\nexport const AUTH_PACKAGE_NAME = 'auth'\n\nexport interface AuthServiceClient {\n    register(request: RegisterRequest): Observable\n\n    login(request: LoginRequest): Observable\n\n    validate(request: ValidateRequest): Observable\n}\n\nexport interface AuthServiceController {\n    register(request: RegisterRequest): Promise | Observable | RegisterResponse\n\n    login(request: LoginRequest): Promise | Observable | LoginResponse\n\n    validate(request: ValidateRequest): Promise | Observable | ValidateResponse\n}\n\nexport function AuthServiceControllerMethods() {\n    return function (constructor: Function) {\n        const grpcMethods: string[] = ['register', 'login', 'validate']\n        for (const method of grpcMethods) {\n            const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)\n            GrpcMethod('AuthService', method)(constructor.prototype[method], method, descriptor)\n        }\n        const grpcStreamMethods: string[] = []\n        for (const method of grpcStreamMethods) {\n            const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)\n            GrpcStreamMethod('AuthService', method)(constructor.prototype[method], method, descriptor)\n        }\n    }\n}\n\nexport const AUTH_SERVICE_NAME = 'AuthService'\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ValidateRequestDto.html":{"url":"classes/ValidateRequestDto.html","title":"class - ValidateRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidateRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/validateRequest.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ValidateRequest\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/validateRequest.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator'\nimport { ValidateRequest } from '../auth.pb'\n\nexport class ValidateRequestDto implements ValidateRequest {\n    @IsString()\n    token: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidateResponse.html":{"url":"interfaces/ValidateResponse.html","title":"interface - ValidateResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ValidateResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.pb.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices'\nimport { Observable } from 'rxjs'\n\nexport const protobufPackage = 'auth'\n\nexport interface RegisterRequest {\n    email: string\n    password: string\n}\n\nexport interface RegisterResponse {\n    status: number\n    error: string[]\n}\n\nexport interface LoginRequest {\n    email: string\n    password: string\n}\n\nexport interface LoginResponse {\n    status: number\n    error: string[]\n    token: string\n}\n\nexport interface ValidateRequest {\n    token: string\n}\n\nexport interface ValidateResponse {\n    status: number\n    error: string[]\n    userId: string\n}\n\nexport const AUTH_PACKAGE_NAME = 'auth'\n\nexport interface AuthServiceClient {\n    register(request: RegisterRequest): Observable\n\n    login(request: LoginRequest): Observable\n\n    validate(request: ValidateRequest): Observable\n}\n\nexport interface AuthServiceController {\n    register(request: RegisterRequest): Promise | Observable | RegisterResponse\n\n    login(request: LoginRequest): Promise | Observable | LoginResponse\n\n    validate(request: ValidateRequest): Promise | Observable | ValidateResponse\n}\n\nexport function AuthServiceControllerMethods() {\n    return function (constructor: Function) {\n        const grpcMethods: string[] = ['register', 'login', 'validate']\n        for (const method of grpcMethods) {\n            const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)\n            GrpcMethod('AuthService', method)(constructor.prototype[method], method, descriptor)\n        }\n        const grpcStreamMethods: string[] = []\n        for (const method of grpcStreamMethods) {\n            const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)\n            GrpcStreamMethod('AuthService', method)(constructor.prototype[method], method, descriptor)\n        }\n    }\n}\n\nexport const AUTH_SERVICE_NAME = 'AuthService'\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.pb.ts\n            \n            interface\n            AuthServiceClient\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.pb.ts\n            \n            interface\n            AuthServiceController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.pb.ts\n            \n            interface\n            LoginRequest\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.pb.ts\n            \n            interface\n            LoginResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.pb.ts\n            \n            interface\n            RegisterRequest\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.pb.ts\n            \n            interface\n            RegisterResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.pb.ts\n            \n            interface\n            ValidateRequest\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.pb.ts\n            \n            interface\n            ValidateResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.pb.ts\n            \n            function\n            AuthServiceControllerMethods\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.pb.ts\n            \n            variable\n            AUTH_PACKAGE_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.pb.ts\n            \n            variable\n            AUTH_SERVICE_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.pb.ts\n            \n            variable\n            protobufPackage\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/loginRequest.dto.ts\n            \n            class\n            LoginRequestDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/registerRequest.dto.ts\n            \n            class\n            RegisterRequestDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/validateRequest.dto.ts\n            \n            class\n            ValidateRequestDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/filter/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/model/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/model/user.entity.ts\n            \n            interface\n            UserCreationAttrs\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/service/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/service/jwt.service.ts\n            \n            injectable\n            JwtService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/auth/strategy/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @grpc/grpc-js : ^1.6.8\n        \n            @nestjs/common : ^9.0.8\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.8\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/microservices : ^9.0.8\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.8\n        \n            @nestjs/sequelize : ^9.0.0\n        \n            bcryptjs : ^2.4.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            dotenv : ^16.0.1\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^8.7.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.5.6\n        \n            sequelize : ^6.21.3\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthServiceControllerMethods   (src/.../auth.pb.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth.pb.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AuthServiceControllerMethods\n                        \n                    \n                \n            \n            \n                \nAuthServiceControllerMethods()\n                \n            \n\n\n\n\n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtService\n\nJwtService\n\nAuthModule -->\n\nJwtService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    9 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AUTH_PACKAGE_NAME   (src/.../auth.pb.ts)\n                        \n                        \n                            AUTH_SERVICE_NAME   (src/.../auth.pb.ts)\n                        \n                        \n                            protobufPackage   (src/.../auth.pb.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth.pb.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_PACKAGE_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'auth'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AUTH_SERVICE_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AuthService'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        protobufPackage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'auth'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
